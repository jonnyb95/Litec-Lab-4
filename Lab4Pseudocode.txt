Compiler Initiatives--------------------------------------------------------

#include <c8051_SDCC.h> 
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <i2c.h>

Function Prototypes---------------------------------------------------------

void Port_Init(void);
void PCA_Init (void);
void XBR0_Init(void);
void SMB_Init(void);
void i2c_start(void);
void PCA_ISR ( void ) __interrupt 9;

void centered(void);
void max_left(void);
void max_right(void);
unsigned int userInputPWForWheelPosition(void);

void DriveCar(void);
void ReadRanger(unsigned int);
void ReadCompass(unsigned int);
void DriveMotor(unsigned char);
void CorrectSteering(void);

char ShouldBangARight(void);
void StopWhenClose(void);
unsigned int DistanceFromRangerToNearestObject(void);

Global Variables------------------------------------------------------------

__sbit __at 0xB6 motorSS;
__sbit __at 0xB7 servoSS;

unsigned int CEX0_CENTER = 2765; 
unsigned int CEX0_MIN = 1659;
unsigned int CEX0_MAX = 3871;
unsigned int CEX0_PW = 2765;

unsigned int CEX2_NEUTRAL = 2765;
unsigned int CEX2_MAX = 3502;
unsigned int CEX2_MIN = 2027;
unsigned int CEX2_PW = 2765;

char input;

unsigned int Counts = 0;

unsigned int h_Counts = 0;
unsigned int heading;
unsigned int desired_heading;
unsigned int k;
signed int error;

unsigned int r_Counts = 0;
unsigned int range;

unsigned char distanceAtWhichToBang = 55;
unsigned char distanceAtWhichToStop = 10;
unsigned char bangedARight = 0; 

Main Function---------------------------------------------------------------

Sys_Init();
Port_Init();
XBR0_Init();
PCA_Init();
SMB_Init();

Wait 1 second for motor to warm up
print "Steering Calibration."
Set steering Pulsewidth to approximatly centered
Call Calibration Functions
	centered();
	max_left();
	max_right();
print "Calibration complete!"	

while True
	Drive_Car

	
Functions-------------------------------------------------------------------



LCD KEYPAD FUNCTIONS


DATA FUNCTIONS

function GetBatteryVoltage
	Change ADC1 input to P1.4 (battery voltage divider)
	Delay ~5ms
	Get conversion from ADC1 and convert to mV
	Change ADC1 input back to P1.5 (potentiometer)
	print the battery voltage (Also serves as a delay for ADC1 input change)

function ReadPot
	Ensure ADC1 input is on P1.5 (potentiometer)
	return ADC1 conversion

function ReadADC
	Clear the Conversion Completed flag
	Initiate A/D conversion
	Wait for conversion to complete
	Return digital value in ADC1 register

function ReadRanger()
	store address of ranger sensor (0xE0)
	set range=0
	creates a data array of length 2
	run function i2c_read_data, passing in the compass address, # of bits to read,
	  the data array, and the source register (2)
	combine the elements of the data array using bit shifts
	start ping for next reading
	return range

function ReadCompass()
	store address of compass sensor
	creates a data array of length 2
	run function i2c_read_data, passing in the compass address, # of bits to read,
	  the data array, and the source register (2)
	combine the elements of the data array using bit shifts
	return heading

POSITION CONTROL FUNCTIONS

function ShouldBangARight
    if (heading is desiredHeading)
        if (DistanceFromRangerToNearestObject is greater than distanceAtWhichToBang) 
            return FALSE;
        else if (DistanceFromRangerToNearestObject is less than or equal to distanceAtWhichToBang)
            return TRUE;

function StopWhenClose
    if heading is desiredHeading
        if distanceFromRangerToNearestObject is less than distanceAtWhichToStop
            Drive the motor with the neutral digital value, i.e., stop the motor

function DriveMotor(given digitalValue from Potentiometer A/D conversion)
    Set the motor pulse width to a rounded value between maximum and minimum 
    motor pulse width, depending on the digital value passed to the function: 
    Motor pulse width = minumum + ceiling(digital value * (maximum - minimum)/(255 - 0))
    Drive motor with the current motor pulse width

function CorrectSteering()
	calculate error (desired heading minus actual heading)
	if (error is greater than 180 degrees)
		subtract 360 degrees from error
	if (error is less than -180 degrees)
		add 360 degrees to error
	calculate a pulsewidth to correct error (k*error + centered pulsewidth)

funcion AvoidObsticles()	
	if (the car is close to an object and the car has NOT turned right previously)
		Raise the desired heaidng by 90 degrees counterclockwise
		Set a flag to reflect that the car has previosuly turned right
	else if (the car is close to an object and the car HAS turned right previously)
		Stop the car (

function DriveCar()
	AvoidObsticles()
	if (r_Counts is greater than or equal to 4)
		set r_Counts to 0
		ReadRanger
		if motor slide switch is active
			DriveMotor
		else
			Set motor pulsewidth to neutral
	if (h_Counts is greater than or equal to 2)
		set h_Counts to 0
		ReadCompass
		if steering slide switch is active
			CorrectSteering
		else
			Set servo pulsewidth to center
	
CALIBRATION FUNCTIONS

function userInputPWForWheelPosition()
    Set "calibrating" variable to TRUE
    while (calibrating variable is TRUE)
        get and store a keyboard character
		if (input is 'r')
            Decrement the steering pulsewidth by 10 counts
    	else if (input is 'l')
            Increment the steering pulsewidth by 10 counts
		else if (input is 'g')
			Set "calibrating" to FALSE
		Return the current servo pulse width
	
function centered()
	print "CENTER: Adjust the pulswidth to make the servo more left (a) or right (d),
	  until the steering is centered, when centered press 'g'
	Centered servo pulsewidth = userInputPWForWheelPosition();

function max_left()
	print "LEFT: Adjust the steering until the servo is at a maximum left (a), when left press 'g'
    Minimum servo pulsewidth = userInputPWForWheelPosition(); 

void max_right()
	print "RIGHT: Adjust the steering until the servo is at a maximum right (d), when right press 'g'
	Maximum servo pulsewidth = userInputPWForWheelPosition();		
	
INITILIZATION FUNCTIONS

function SMB_Init()
	Initialize SMBus registers
	Set SCL to 100KHz
	Enable SMBus

function Port_Init()
    Bitmask output pins (Port 1.0 and 1.2) to push-pull mode

function XBR0_Init()
    Configure crossbar (XBR0 = 0x27;)

function PCA_Init(void)
	PCA0MD = 0x81;
	  -Enable PCA0 Counter/Timer Overflow interrupt when CF is set and suspend
	   PCA0 operation while the system controller is in idle mode
	PCA0CPM0 = 0xC2;
	  -For PCA0 module 0, enable 16-bit PWM mode and compare
	PCA0CN = 0x40;
	  -Enable the PCA0 Counter/Timer itself
	EIE1 |= 0x08;
	  -Enable interrupt requests generated by CP1RIF flag
	EA = 1;
	  -Enable global interrupts
	
function ADC1 Initialization
	Set Vref to use internal reference voltage (2.4 V)
	Enable A/D converter (ADC1)
	Set A/D converter gain to 1

function PCA_ISR ( void ) __interrupt 9
	if(overflow flag is activated)
		Set start count so that the PCA count overflows in 20ms
		Increment Counts, h_Counts, and r_Counts
		Clear the PCA0 overflow flag (CF = 0;)
	For PCA0, clear module flags (PCA0CN &=0x40;)
